import threading
import time
import random

class MyMutex:
    def __init__(self):
        #Inicializa o lock e a condição
        self.lock = threading.Lock()
        self.cond = threading.Condition(self.lock)
        self.locked = False

    def acquire(self):
        with self.lock:
            #Espera até que o mutex esteja disponível
            while self.locked:
                self.cond.wait()
            self.locked = True

    def release(self):
        with self.lock:
            #Libera o mutex e notifica todas as threads
            self.locked = False
            self.cond.notify_all()

def miner(recursos, valores, pontuacoes, mutex, max_extracao, miner_id):
    while sum(recursos.values()) > 0:
        mutex.acquire()
        #Escolhe aleatoriamente um recurso
        recurso_escolhido = random.choice(list(recursos.keys()))
        if recursos[recurso_escolhido] > 0:
            #Determina a quantidade a ser extraída
            quantidade_extraida = random.randint(1, min(max_extracao, recursos[recurso_escolhido]))
            recursos[recurso_escolhido] -= quantidade_extraida
            # tualiza a pontuação do mineiro
            pontuacoes[miner_id] += quantidade_extraida * valores[recurso_escolhido]
            print(f"Mineiro {miner_id} extraiu {quantidade_extraida} de {recurso_escolhido}.")
        mutex.release()
        time.sleep(1)  #Pausa para simular tempo de extração

if __name__ == "__main__":
    num_mineiros = 5
    recursos = {
        "ouro": 100,
        "diamante": 50,
        "rubi": 30,
        "esmeralda": 20,
        "safira": 10
    }

    valores = {
        "ouro": 1,
        "diamante": 5,
        "rubi": 3,
        "esmeralda": 2,
        "safira": 4
    }

    pontuacoes = {i: 0 for i in range(num_mineiros)}
    max_extracao = 5

    mutex = MyMutex()

    threads = []
    for i in range(num_mineiros):
        #Cria e inicia uma thread para cada mineiro
        t = threading.Thread(target=miner, args=(recursos, valores, pontuacoes, mutex, max_extracao, i))
        threads.append(t)
        t.start()
    
    #Espera todos as threads terminarem
    for t in threads:
        t.join()

    #Exibe as pontuações finais
    print("\nPontuação final dos mineiros:")
    for miner_id, pontuacao in pontuacoes.items():
        print(f"Mineiro {miner_id}: {pontuacao} pontos")
