import threading
import time
import random

class Semaphore:
    def __init__(self, initial_count):
        #Inicializa o semáforo com uma contagem inicial e cria lock e condição
        self.count = initial_count
        self.lock = threading.Lock()
        self.condition = threading.Condition(self.lock)

    def acquire(self):
        with self.condition:
            #Aguarda até que o semáforo tenha um valor maior que zero
            while self.count == 0:
                self.condition.wait()
            self.count -= 1  #Diminui o contador do semáforo

    def release(self):
        with self.condition:
            #Incrementa o contador do semáforo e notifica todos as thread
            self.count += 1
            self.condition.notify()

def miner(recursos, valores, pontuacoes, sem, max_extracao, miner_id):
    while sum(recursos.values()) > 0:
        sem.acquire()  #Adquire o semáforo antes de acessar os recursos
        try:
            #Escolhe um recurso aleatório e tenta extrair uma quantidade
            recurso_escolhido = random.choice(list(recursos.keys()))
            if recursos[recurso_escolhido] > 0:
                quantidade_extraida = random.randint(1, min(max_extracao, recursos[recurso_escolhido]))
                recursos[recurso_escolhido] -= quantidade_extraida
                pontuacoes[miner_id] += quantidade_extraida * valores[recurso_escolhido]
                print(f"Mineiro {miner_id} extraiu {quantidade_extraida} de {recurso_escolhido}.")
        finally:
            sem.release()  #Libera o semáforo após acessar os recursos
        time.sleep(1)  #Pausa para simular tempo de extração

if __name__ == "__main__":
    num_mineiros = 5
    recursos = {
        "ouro": 100,
        "diamante": 50,
        "rubi": 30,
        "esmeralda": 20,
        "safira": 10
    }

    valores = {
        "ouro": 1,
        "diamante": 5,
        "rubi": 3,
        "esmeralda": 2,
        "safira": 4
    }

    pontuacoes = {i: 0 for i in range(num_mineiros)}
    max_extracao = 5

    #Cria um semáforo com 1 recurso disponível
    sem = Semaphore(1)

    threads = []
    for i in range(num_mineiros):
        #Cria e inicia um thread para cada mineiro
        t = threading.Thread(target=miner, args=(recursos, valores, pontuacoes, sem, max_extracao, i))
        threads.append(t)
        t.start()

    for t in threads:
        #Aguarda todos os threads terminarem
        t.join()

    #Exibe as pontuações finais
    print("\nPontuação final dos mineiros:")
    for miner_id, pontuacao in pontuacoes.items():
        print(f"Mineiro {miner_id}: {pontuacao} pontos")
